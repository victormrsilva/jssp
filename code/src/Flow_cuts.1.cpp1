

#include "Flow_cuts.hpp"
#include <vector>
#include <string>
#include <cfloat>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <time.h>



using namespace std;



Flow::Flow( const Instance &_inst ) :
    inst_(_inst),
    //mip(lp_create()),
    xIdx_(vector< vector< map< int, map< int, map< int, GRBVar >>>>> (inst_.n(), vector< map< int, map< int, map< int, GRBVar >>>>(inst_.m()+1))),
    enter_flow(vector<vector<vector<vector<GRBVar>>>>(inst_.n(),vector<vector<vector<GRBVar>>>(inst_.m()+2+inst_.n(),vector<vector<GRBVar>>(inst_.maxTime())))),
    exit_flow(vector<vector<vector<vector<GRBVar>>>>(inst_.n(),vector<vector<vector<GRBVar>>>(inst_.m()+1,vector<vector<GRBVar>>(inst_.maxTime())))),
    process(vector<vector<vector<vector<GRBVar>>>>(inst_.n(),(vector<vector<vector<GRBVar>>>(inst_.m()+1,vector<vector<GRBVar>>(inst_.maxTime()))))) {
    
    vector< string > names;
    vector< double > lb;
    vector< double > ub;
    vector< double > obj;
    vector< char > integer;

    try {
        env = new GRBEnv();
        GRBModel model = GRBModel(*env);

        // creating x vars
        for ( int j=0 ; (j<inst_.n()) ; ++j ) {
            for ( int m=-1 ; (m < inst_.m()) ; ++m ) {
                if (m == -1){ // máquina inicial
                    
                    xIdx_[j][m+1][0][inst_.machine(j,0)+1][0] = model.addVar(0.0, 1.0, 0.0, GRB_CONTINUOUS, "x("+to_string(j+1)+",i,0,"+to_string(inst_.machine(j,0)+1)+",0)");
                    
                    exit_flow[j][0][j].push_back(xIdx_[j][m+1][0][inst_.machine(j,0)+1][0]);
                    enter_flow[j][inst_.machine(j,0)+1][0].push_back(xIdx_[j][m+1][0][inst_.machine(j,0)+1][0]);
                    names.push_back( "x("+to_string(j+1)+",i,0,"+to_string(inst_.machine(j,0)+1)+",0)" );
                    lb.push_back( 0.0 );
                    ub.push_back( 1 );
                    obj.push_back( 0 );
                    integer.push_back( 0 );
                    continue;
                }
                int m0 = inst_.machine(j,m);
                int mf = (m == inst_.m()-1 ? inst_.m() : inst_.machine(j,m+1));
                int dur = inst_.time(j,m0); // duration time for machine m0 in job j
                for (int t = inst_.est(j,m0); t < inst_.lst(j,m0); t++){
                    if (mf < inst_.m()){
                        // arc for another machine
                        xIdx_[j][m0+1][t][mf+1][t+dur] = model.addVar(0.0, 1.0, 0.0, GRB_CONTINUOUS, "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+","+to_string(mf+1)+","+to_string(t+dur)+")");
                        //cout << j << " " << m0+1 << " " << t << " " << mf+1 << " " << t+dur << endl;
                        enter_flow[j][mf+1][t+dur].push_back(xIdx_[j][m0+1][t][mf+1][t+dur]);
                        exit_flow[j][m0+1][t].push_back(xIdx_[j][m0+1][t][mf+1][t+dur]);
                        for (int tp = t; tp < t+dur; tp++){
                            process[j][m0+1][tp].push_back(xIdx_[j][m0+1][t][mf+1][t+dur]);
                        }
                        names.push_back( "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+","+to_string(mf+1)+","+to_string(t+dur)+")" );
                        lb.push_back( 0.0 );
                        ub.push_back( 1 );
                        obj.push_back( 0 );
                        integer.push_back( 0 );
                        // arc for same machine (waiting) 
                        // can only be made in the last moment possible
                        if (t == inst_.lst(j,m0)-1) continue;
                        // else
                        xIdx_[j][m0+1][t][m0+1][t+1] = model.addVar(0.0, 1.0, 0.0, GRB_CONTINUOUS, "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+","+to_string(m0+1)+","+to_string(t+1)+")");
                        enter_flow[j][m0+1][t+1].push_back(xIdx_[j][m0+1][t][m0+1][t+1]);
                        exit_flow[j][m0+1][t].push_back(xIdx_[j][m0+1][t][m0+1][t+1]);
                        //cout << j << " " << m0+1 << " " << t << " " << m0+1 << " " << t+1 << endl;
                        names.push_back( "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+","+to_string(m0+1)+","+to_string(t+1)+")" );
                        lb.push_back( 0.0 );
                        ub.push_back( 1 );
                        obj.push_back( 0 );
                        integer.push_back( 0 );
                    } else { // conclusion machine f
                        xIdx_[j][m0+1][t][mf+1][t+dur] = model.addVar(0.0, 1.0, 0.0, GRB_CONTINUOUS, "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+",f,"+to_string(t+dur)+")");
                        enter_flow[j][mf+1+j][t+dur].push_back(xIdx_[j][m0+1][t][mf+1][t+dur]);
                        exit_flow[j][m0+1][t].push_back(xIdx_[j][m0+1][t][mf+1][t+dur]);
                        for (int tp = t; tp < t+dur; tp++){
                            process[j][m0+1][tp].push_back(xIdx_[j][m0+1][t][mf+1][t+dur]);
                        }
                        names.push_back( "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+",f,"+to_string(t+dur)+")" );
                        lb.push_back( 0.0 );
                        ub.push_back( 1 );
                        obj.push_back( 0 );
                        integer.push_back( 0 );

                        xIdx_[j][m0+1][t][m0+1][t+1] = model.addVar(0.0, 1.0, 0.0, GRB_CONTINUOUS, "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+","+to_string(m0+1)+","+to_string(t+1)+")");
                        enter_flow[j][m0+1][t+1].push_back(xIdx_[j][m0+1][t][m0+1][t+1]);
                        exit_flow[j][m0+1][t].push_back(xIdx_[j][m0+1][t][m0+1][t+1]);
                        //cout << j << " " << m0+1 << " " << t << " " << m0+1 << " " << t+1 << endl;
                        names.push_back( "x("+to_string(j+1)+","+to_string(m0+1)+","+to_string(t)+","+to_string(m0+1)+","+to_string(t+1)+")" );
                        lb.push_back( 0.0 );
                        ub.push_back( 1 );
                        obj.push_back( 0 );
                        integer.push_back( 0 );
                    }
                }
            }
        }

        ofstream f;
        f.open ("variables.txt");
        for (string name : names){
            f << name << endl;
        }
        f.close();
        
        

        // c var
        cIdx_ = model.addVar(0.0, inst_.maxTime(), 1.0, GRB_CONTINUOUS, "C");
        names.push_back("C");
        lb.push_back( 0.0 );
        ub.push_back( DBL_MAX );
        obj.push_back( 1.0 );
        integer.push_back( 0 );
        cout << "Number of variables: " << names.size() << endl;
        clock_t begin = clock();
        //lp_add_cols( mip, obj, lb, ub, integer, names );
        clock_t end = clock();
        double time_spent = ((double)end-begin)/((double)CLOCKS_PER_SEC);
        cout << "variáveis criadas. Tempo: " << time_spent << endl;
        // f.open ("exit_flows.txt");
        // for (int j = 0; j < inst_.n(); j++){
        //     for (int tf=0; tf < inst_.maxTime(); tf++){
        //         for (int mf = 0; mf < inst_.m()+1; mf++){
                
        //             f << "machine " << mf << " time " << tf << endl;
        //             for (int var : exit_flow[j][mf][tf]){
        //                 f << names[var] << endl;
        //             }
        //         }
        //     }
        // }
        // f.close();
        // cout << "exit_flows criado" << endl;

        // f.open ("enter_flows.txt");
        // for (int j = 0; j < inst_.n(); j++){
        //     for (int t0=0; t0 < inst_.maxTime()-1; t0++){
        //         for (int m0 = 0; m0 <= inst_.m()+1; m0++){
                
        //             f << "machine " << m0 << " time " << t0 << endl;
        //             for (int var : enter_flow[j][m0][t0]){
        //                 f << names[var] << endl;
        //             }
        //         }
        //     }
        // }
        // f.close();
        // cout << "enter_flows criado" << endl;

        // f.open ("processing_machines.txt");
        // for (int t0=0; t0 < inst_.maxTime()-1; t0++){
        //     for (int m0 = 0; m0 <= inst_.m(); m0++){
            
        //         f << "machine " << m0 << " time " << t0 << endl;
        //         for (int j = 0; j < inst_.n(); j++){
        //             for (int var : process[j][m0][t0]){
        //                 f << names[var] << endl;
        //             }
        //         }
        //     }
        // }
        // f.close();
        // cout << "processing_machines created" << endl;
        // createCompleteGraphDot();
        // cout << "arquivo dot criado" << endl;

        // initial flow constraint
        for (int j = 0; j < inst_.n(); j++){
            GRBLinExpr expr = 0;
            // vector< int > idx;
            // vector< double > coef;
            for (GRBVar var : exit_flow[j][0][j]){
                expr += var;
                // idx.push_back( var );
                // coef.push_back( -1.0 );
            }
            model.addConstr(expr, GRB_EQUAL, 1.0, "init_flow("+to_string(j)+")");
            //lp_add_row( mip, idx, coef, "init_flow("+to_string(j)+")", 'E', -1.0 );
        }
        cout << "initial flow constraints ok" << endl;

        // final flow constraint
        for (int j = 0; j < inst_.n(); j++){
            // vector< int > idx;
            // vector< double > coef;
            GRBLinExpr expr = 0;
            for (int t = 1; t < inst_.maxTime(); t++){
                for (GRBVar var : enter_flow[j][inst_.m()+1+j][t]){
                    expr += var;
                    // idx.push_back( var );
                    // coef.push_back( 1.0 );
                }
            }

            if (expr.size() != 0){
                model.addConstr(expr, GRB_EQUAL,  1.0, "final_flow("+to_string(j)+")");
            }
            // if (idx.size() != 0){
            //     //lp_add_row( mip, idx, coef, "final_flow("+to_string(j)+")", 'E', 1.0 );
            // }
        }
        cout << "final flow constraints ok" << endl;
        // flow constraints
        for (int j = 0; j < inst_.n(); j++){
            for ( int t=0 ; (t<inst_.maxTime()) ; ++t ) {
                for ( int m=1 ; (m<=inst_.m()) ; ++m ) {
                    GRBLinExpr expr = 0;
                    // vector< int > idx;
                    // vector< double > coef;
                    for (GRBVar var : enter_flow[j][m][t]){
                        expr += var;
                        // idx.push_back( var );
                        // coef.push_back( 1.0 );
                    }
                    for (GRBVar var : exit_flow[j][m][t]){
                        expr -= var;
                        // idx.push_back( var );
                        // coef.push_back( -1.0 );
                    }

                    if (expr.size() != 0){
                        model.addConstr(expr, GRB_EQUAL,  0, "flow("+to_string(j+1)+","+to_string(m)+","+to_string(t)+")");
                    }

                    // if (idx.size() != 0){
                    //     //lp_add_row( mip, idx, coef, "flow("+to_string(j+1)+","+to_string(m)+","+to_string(t)+")", 'E', 0.0 );
                    // }
                }
            }
        }
        cout << "flow constraints created" << endl;

        // processing restriction
        for ( int t=0 ; (t<inst_.maxTime()) ; ++t ) {

            for ( int m=0 ; (m<=inst_.m()) ; ++m ) {
                // vector< int > idx;
                // vector< double > coef;
                GRBLinExpr expr = 0;
                for (int j = 0; j < inst_.n(); j++){
                    for( GRBVar var : process[j][m][t]){
                        // idx.push_back( var );
                        // coef.push_back( 1.0 );
                        expr += var;
                    }
                }
                if (expr.size() != 0){
                    model.addConstr(expr, GRB_LESS_EQUAL,  1.0, "processing("+to_string(m) + ","+to_string(t) + ")");
                }
                // if (idx.size() != 0){
                //     //lp_add_row( mip, idx, coef, "processing("+to_string(m) + ","+to_string(t) + ")", 'L', 1.0 );        
                // }
            }
            
        }
        cout << "processing constraints created" << endl;

        // restrições fin
        for (int j = 0; j < inst_.n(); j++){
            // vector< int > idx;
            // vector< double > coef;
            GRBLinExpr expr = 0;
            //idx.push_back( cIdx_ );
            // coef.push_back( 1.0 );
            expr += cIdx_;
            for (int t = 1; t < inst_.maxTime(); t++){
                
                for (GRBVar var : enter_flow[j][inst_.m()+1+j][t]){
                    expr -= t*var;
                    // idx.push_back( var );
                    // coef.push_back( -t );
                }
            }
            model.addConstr(expr, GRB_GREATER_EQUAL,  0.0, "fin("+to_string(j+1)+")");
            //lp_add_row( mip, idx, coef, "fin("+to_string(j+1)+")", 'G', 0 );
        }
        cout << "end constraints created" << endl;

        //lp_write_lp( mip, inst_.instanceName().c_str() );
        //lp_write_mps( mip, inst_.instanceName().c_str() );
        model.write("teste.lp");
        if (inst_.execute()){
            //model.set(GRB_IntParam_PreCrush, 1);
            //Callback cb = Callback(&model, xIdx_, inst_, enter_flow, exit_flow, process, cIdx_);
            //model.setCallback(&cb);
            int bnd_anterior = 0;
            double bnd = 9;
            int c = 9;
            bool pare = false;
            double limite = 0.00001;
            do {
                bnd_anterior = c;
                model.optimize();
                model.write("teste_cb.lp");
                bnd = model.get(GRB_DoubleAttr_ObjVal);
                c = floor(bnd);
                for (int j = 0; j < inst_.n(); j++){
                    double sol = 0;
                    GRBLinExpr expr = 0;
                    expr += cIdx_;
                    for (int t = 1; t < inst_.maxTime(); t++){
                        for (GRBVar var : enter_flow[j][inst_.m()+1+j][t]){
                            int coef = max(t,c);
                            double x = var.get(GRB_DoubleAttr_X);
                            //cout << coef << " * " << x << " ";
                            expr -= max(t,c)*var;
                            sol += coef*x;
                        }
                    }
                    double violado = sol-c;
                    cout << endl << "C: " << c << " soma: " << sol << " soma - C: " << violado << endl;
                    model.remove(model.getConstrByName("fin("+to_string(j+1)+")"));
                    model.addConstr(expr, GRB_GREATER_EQUAL,  0.0, "fin("+to_string(j+1)+")");
                    if (violado < limite){
                        //getchar();
                        pare = true;
                    }
                }
                model.write("teste_cb.lp");
                //getchar();
            //} while (!pare);
            } while (bnd_anterior != c);

        for ( int j=0 ; (j<inst_.n()) ; ++j ) {
            for ( int m=-1 ; (m < inst_.m()) ; ++m ) {
                if (m == -1){ // máquina inicial
                    xIdx_[j][m+1][0][inst_.machine(j,0)+1][0].set(GRB_CharAttr_VType,GRB_BINARY);
                    continue;
                }
                int m0 = inst_.machine(j,m);
                int mf = (m == inst_.m()-1 ? inst_.m() : inst_.machine(j,m+1));
                int dur = inst_.time(j,m0); // duration time for machine m0 in job j
                for (int t = inst_.est(j,m0); t < inst_.lst(j,m0); t++){
                    if (mf < inst_.m()){
                        // arc for another machine
                        xIdx_[j][m0+1][t][mf+1][t+dur].set(GRB_CharAttr_VType,GRB_BINARY);
                        //cout << j << " " << m0+1 << " " << t << " " << mf+1 << " " << t+dur << endl;
                        if (t == inst_.lst(j,m0)-1) continue;
                        // else
                        xIdx_[j][m0+1][t][m0+1][t+1].set(GRB_CharAttr_VType,GRB_BINARY);
                    } else { // conclusion machine f
                        xIdx_[j][m0+1][t][mf+1][t+dur].set(GRB_CharAttr_VType,GRB_BINARY);
                        xIdx_[j][m0+1][t][m0+1][t+1].set(GRB_CharAttr_VType,GRB_BINARY);
                    }
                }
            }
        }
        cIdx_.set(GRB_CharAttr_VType,GRB_INTEGER);
        model.update();
        cout << "Variáveis modificadas" << endl;
        getchar();
        model.write("teste.lp");
        model.optimize();
            
            //model.write("teste.lp");
            //lp_optimize( mip );
            //lp_write_sol(mip, "jssp_flow.sol");
        }
    } catch (GRBException e) {
        cout << "Error number: " << e.getErrorCode() << endl;
        cout << e.getMessage() << endl;
    } catch (...) {
        cout << "Error during optimization" << endl;
    }
}

Flow::~Flow()
{
    //lp_free( &mip );
}

// void Flow::create_x11(){
//     x11_color.push_back("black");
//     x11_color.push_back("magenta");
//     x11_color.push_back("grey");
//     x11_color.push_back("gold");
//     x11_color.push_back("blue");
//     x11_color.push_back("green");
//     x11_color.push_back("yellow");
//     x11_color.push_back("red");
//     x11_color.push_back("cyan");
//     x11_color.push_back("crimson");
//     x11_color.push_back("chocolate");
//     x11_color.push_back("brown");
//     x11_color.push_back("orange");
// }

void Flow::createCompleteGraphDot(){
    ofstream f;
    f.open ("complete.dot");

    f << "digraph complete {" << endl;
    //f << "ratio = \"auto\" ;" << endl;
    f << "rankdir=LR;" << endl << endl;
    for (int m = 0; m <= inst_.m()+1; m++){
        if (m == 0){
            f << "\"i,1\" [shape=box];" << endl;
            continue;
        }
        string mach;
        if (mach == to_string(inst_.m()+1)) mach = "f";
        else mach = to_string(m);
        for (int t = 0; t < inst_.maxTime(); t++){
            f << "\"" << mach << "," << t+1 << "\" [shape=box];" << endl;
        }
    }

    for ( int j=0 ; (j<inst_.n()) ; ++j ) {
        for ( int m=-1 ; (m < inst_.m()) ; ++m ) {
            if (m == -1){
                f << "\"i,1\" -> \"" << inst_.machine(j,0)+1 <<",1\" [ label=\"x(" << j+1 << ",i,1," << inst_.machine(j,0)+1 << ",1)\" ]" << endl;
                continue;
            }
            int m0 = inst_.machine(j,m);
            int mf = (m == inst_.m()-1 ? inst_.m() : inst_.machine(j,m+1));
            int dur = inst_.time(j,m0); // duration time for machine m0 in job j
            for (int t = inst_.est(j,m0); t < inst_.lst(j,m0); t++){
                if (mf < inst_.m()){
                    // arc for another machine
                    f << "\"" << m0+1 << "," << t << "\" -> \"" << mf+1 << "," << t+dur << "\" [ label=\"x(" << j+1 << "," << m0+1 << "," << t << "," << mf+1 << "," << t+dur<<")\" ]" << endl;
                    // arc for same machine (waiting) 
                    //can only be made in the last moment possible
                    if (t == inst_.lst(j,m0)-1) continue;
                    // else
                    f << "\"" << m0+1 << "," << t << "\" -> \"" << m0+1 << "," << t+1 << "\" [ label=\"x(" << j+1 << "," << m0+1 << "," << t << "," << m0+1 << "," << t+1<<")\" ]" << endl;
                } else { // last machine
                    f << "\"" << m0+1 << "," << t << "\" -> \"f," << t+dur << "\" [ label=\"x(" << j+1 << "," << m0+1 << "," << t << ",f," << t+dur<<")\" ]" << endl;
                }
            }
        }
    }


    // string mach0,machf;
    // for ( int j=0 ; (j<inst_.n()) ; ++j ) {
    //     for ( int m0=0 ; (m0<=inst_.m()) ; ++m0 ) {
    //         mach0 = to_string(m0);
    //         if (mach0 == "0") mach0 = "i";
    //         for ( int t0 = 0; t0 < inst_.maxTime()-1; t0++  ) {
    //             for (int mf = 1; mf <= inst_.m()+1; mf++){
    //                 machf = to_string(mf);
    //                 if (machf == to_string(inst_.m()+1)) machf = "f";
    //                 for (int tf=t0+1; tf < inst_.maxTime(); tf++){
    //                     if (m0 == mf && tf > t0+1) continue;
    //                     f << "\"" << m0 << "," << t0+1 << "\" -> " << "\"" << machf << "," << tf << "\" [ label=\"x(" << j+1 << "," << mach0 << "," << t0+1 << "," << machf << "," << tf+1 << ")\" ];"<< endl ; // \" color=\"" << x11_color[j] <<
    //                 }
    //             }
    //         }
    //     }
    // }

    f << "{rank=same;" << " \"i,1\" }" << endl;

    for (int t = 0; t < inst_.maxTime(); t++){
        f << "{rank=same;";
        for (int m = 1; m <= inst_.m()+1; m++){
            string mach;
            if (m == inst_.m()+1) mach = "f";
            else mach = to_string(m);

            if (m > 1 )
                f << ",";
            f << " \"" << mach << "," << t+1 << "\"";
        }
        f << "}" << endl;
    }
    // for (int m = 0; m <= inst_.m()+1; m++){
    //     string mach = to_string(m);
    //     if (mach == "0") mach = "i";
    //     else if (mach == to_string(inst_.m()+1)) mach = "f";
    //     f << "{rank=same;";
    //     for (int t = 0; t < inst_.maxTime(); t++){
    //         f << " \"" << mach << "," << t+1 << "\"";
    //     }
    //     f << "}" << endl;
    // }
    f << "}" << endl;
    f.close();
}

