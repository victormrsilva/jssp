#include "Flow.hpp"

#include <vector>
#include <string>
#include <cfloat>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <time.h>


using namespace std;

// int Flow::getXidx(int j, int m0, int t0, int mf, int tf) const{
//     auto it = xIdx_[j][m0].find(t0);
//     if (it == xIdx_[j][m0].end()) return -1;
//     auto it2 = it->second.find(mf);
//     if (it2 == it->second.end()) return -1;
//     auto it3 = it2->second.find(tf);
//     if (it3 == it2->second.end()) return -1;
//     return it3->second; // return value of map tf (number of variable)
// }

Flow::Flow( const Instance &_inst ) :
    inst_(_inst),
    mip(lp_create()),
    xIdx_(vector<vector<vector<int>>>(inst_.n(),vector<vector<int>>(inst_.m()+2,vector<int>(inst_.maxTime()+1)))),
    enter_flow(vector<vector<vector<vector<int>>>>(inst_.n(),vector<vector<vector<int>>>(inst_.m()+2+inst_.n(),vector<vector<int>>(inst_.maxTime()+1)))),
    exit_flow(vector<vector<vector<vector<int>>>>(inst_.n(),vector<vector<vector<int>>>(inst_.m()+1,vector<vector<int>>(inst_.maxTime()+1)))),
    process(vector<vector<vector<vector<int>>>>(inst_.n(),(vector<vector<vector<int>>>(inst_.m()+1,vector<vector<int>>(inst_.maxTime()+1))))) {
    
    vector< string > names;
    vector< double > lb;
    vector< double > ub;
    vector< double > obj;
    vector< char > integer;

    // creating x vars
    for ( int j=0 ; (j<inst_.n()) ; ++j ) {
        for ( int m=0 ; m <= inst_.m(); ++m ) {
            if (m == 0){ // máquina inicial
                
                xIdx_[j][0][0] = names.size();
                //exit_flow[j][0][0].push_back(names.size()); // fluxo sai no tempo 0 (inicial)
                //enter_flow[j][inst_.machine(j,0)+1][0].push_back(names.size()); // fluxo entra no tempo 0 (inicial)
                names.push_back( "x("+to_string(j+1)+",i,0)" );
                lb.push_back( 0.0 );
                ub.push_back( 1 );
                obj.push_back( 0 );
                integer.push_back( 1 );
                continue;
            }

            int dur = inst_.time(j,m-1); // duration time for machine m in job j
            cout << m << "  " << dur << "  " << inst_.est(j,m-1) << " " << inst_.lst(j,m-1) << endl;
            for (int t = inst_.est(j,m-1); t <= inst_.lst(j,m-1); t++){
                xIdx_[j][m][t] = names.size();
                //cout << j << " " << m << " " << t << endl;
                names.push_back( "x("+to_string(j+1)+","+to_string(m)+","+to_string(t)+")" );
                lb.push_back( 0.0 );
                ub.push_back( 1 );
                obj.push_back( 0 );
                integer.push_back( 1 );
                //cout << "x("+to_string(j+1)+","+to_string(m)+","+to_string(t)+")" << " " << xIdx_[j][m][t] << endl;
                // if not machine f
            }
        }

        // end vertex
        //cout << inst_.m() << " " << inst_.est(j,inst_.machine(j,inst_.m()-1)) << " " << inst_.lst(j,inst_.machine(j,inst_.m()-1)) << endl;
        for (int t = inst_.est(j,inst_.machine(j,inst_.m()-1)); t <= inst_.lst(j,inst_.machine(j,inst_.m()-1)); t++){
            int dur = inst_.time(j,inst_.m()-1); // duration time for machine esta_maquina in job j
            xIdx_[j][inst_.m()+1][t+dur] = names.size();
            //cout << j << " " << esta_maquina << " " << t << endl;
            names.push_back( "x("+to_string(j+1)+",f,"+to_string(t+dur)+")" );
            lb.push_back( 0.0 );
            ub.push_back( 1 );
            obj.push_back( 0 );
            integer.push_back( 1 );
            //cout << "x("+to_string(j+1)+",f,"+to_string(t+dur)+")" << " " << xIdx_[j][inst_.m()+1][t+dur] << endl;
            // if not machine f

            // for (int tp = t; tp < t+dur; tp++){
            //     process[j][inst_.m()+1][tp].push_back(names.size());
            // }
        }

    }

    

    for ( int j=0 ; (j<inst_.n()) ; ++j ) {
        for ( int m=0 ; m <= inst_.m()+1; ++m ) {
            if (m == 0){
                exit_flow[j][0][0].push_back(xIdx_[j][inst_.machine(j,0)+1][0]); 
                enter_flow[j][inst_.machine(j,0)+1][0].push_back(xIdx_[j][inst_.machine(j,0)+1][0]);
                continue;
            } else if (m == inst_.m()+1){
                int esta_maquina = inst_.machine(j,m-2)+1;
                int dur = inst_.time(j,esta_maquina-1);
                for (int t = inst_.est(j,esta_maquina-1); t <= inst_.lst(j,esta_maquina-1); t++){
                    
                    enter_flow[j][inst_.m()+1][t+dur].push_back(xIdx_[j][esta_maquina][t]);
                    //cout << inst_.m()+1 << " " << t+dur << " " << esta_maquina << " " << t << endl;
                }
                continue;
            }
            int esta_maquina = inst_.machine(j,m-1)+1;
            int maquina_anterior = (m < 2 ? 0 : inst_.machine(j,m-2)+1);
            int proxima_maquina = (m == inst_.m() ? m+1 : inst_.machine(j,m)+1); // próxima máquina
            int dur = inst_.time(j,esta_maquina-1); // duration time for machine esta_maquina in job j
            //cout << j << " " << m << " " << maquina_anterior << " " << esta_maquina <<  " "  << proxima_maquina<< endl;
            for (int t = inst_.est(j,esta_maquina-1); t <= inst_.lst(j,esta_maquina-1); t++){
                if (t > 0){
                    if (t - inst_.est(j,esta_maquina-1) >= 0)
                        enter_flow[j][esta_maquina][t].push_back(xIdx_[j][esta_maquina][t]);

                    if (maquina_anterior >= 2 && t - inst_.time(j,inst_.machine(j,m-2)) >= 0) {
                        //cout << "esta " << esta_maquina << " t " << t << " anterior " << maquina_anterior << " t-dur " << t-inst_.time(j,inst_.machine(j,m-2)) << endl;
                        enter_flow[j][esta_maquina][t].push_back(xIdx_[j][maquina_anterior][t-inst_.time(j,inst_.machine(j,m-2))]);
                    }
                } 

                //cout << "j " << j << " esta " << esta_maquina << " t " << t << " proxima " << proxima_maquina << " dur " << dur << endl;
                
                exit_flow[j][esta_maquina][t].push_back(xIdx_[j][proxima_maquina][t+dur]); // proccess flux
                if (t < inst_.lst(j,esta_maquina-1) && esta_maquina != 0){
                    exit_flow[j][esta_maquina][t].push_back(xIdx_[j][esta_maquina][t+1]); // proccess flux
                }
                // if (t < inst_.lst(j,esta_maquina)){
                //     enter_flow[j][esta_maquina][t+1].push_back(names.size()); // proccess flux
                // }

                //exit_flow[j][esta_maquina][t].push_back(names.size());
            }
        }
    }
    
    for (int j = 0; j < inst_.n(); j++){
        for (int m = 1; m <= inst_.m(); m++){
            int esta_maquina = inst_.machine(j,m-1)+1;
            int dur = inst_.time(j,inst_.machine(j,m-1));
            for (int t = inst_.est(j,esta_maquina-1); t <= inst_.lst(j,esta_maquina-1); t++){
                //cout << "j " << j << " esta " << esta_maquina << " t " << t << " dur " << dur << " est " << inst_.est(j,esta_maquina-1) << endl;
                
                for (int tp = 0; tp < dur; tp++){
                    if (t - tp < inst_.est(j,esta_maquina-1)) 
                        continue; // se menor do que o inicio da máquina
                    process[j][esta_maquina][t].push_back(xIdx_[j][esta_maquina][t-tp]);

                    
                    //process[j][esta_maquina][t].push_back(xIdx_[j][esta_maquina][tp]);
                }
            }
        }
    }

    ofstream f;
    f.open ("variables.txt");
    for (string name : names){
        f << name << endl;
    }
    f.close();
    
    

    // c var
    cIdx_ = names.size();
    names.push_back("C");
    lb.push_back( 0.0 );
    ub.push_back( DBL_MAX );
    obj.push_back( 1.0 );
    integer.push_back( 1 );
    cout << "Number of variables: " << names.size() << endl;
    clock_t begin = clock();
    lp_add_cols( mip, obj, lb, ub, integer, names );
    clock_t end = clock();
    double time_spent = ((double)end-begin)/((double)CLOCKS_PER_SEC);
    cout << "variáveis criadas. Tempo: " << time_spent << endl;
    f.open ("exit_flows.txt");
    for (int mf = 0; mf < inst_.m()+1; mf++){
        for (int tf=0; tf <= inst_.maxTime(); tf++){
            f << "machine " << mf << " time " << tf << endl;
            for (int j = 0; j < inst_.n(); j++){
                f << "j " << j << endl;
                for (int var : exit_flow[j][mf][tf]){
                    f << names[var] << endl;
                }
            }
        }
    }
    f.close();
    cout << "exit_flows criado" << endl;

    f.open ("enter_flows.txt");
    
    for (int m0 = 0; m0 <= inst_.m()+1; m0++){
        for (int t0=0; t0 <= inst_.maxTime(); t0++){
        f << "machine " << m0 << " time " << t0 << endl;
            for (int j = 0; j < inst_.n(); j++){
                f << "j " << j << endl;
                for (int var : enter_flow[j][m0][t0]){
                    f << names[var] << endl;
                }
            }
        }
    }
    f.close();
    cout << "enter_flows criado" << endl;

    f.open ("processing_machines.txt");
    for (int t0=0; t0 < inst_.maxTime()-1; t0++){
        for (int m0 = 0; m0 <= inst_.m(); m0++){
        
            f << "machine " << m0 << " time " << t0 << endl;
            for (int j = 0; j < inst_.n(); j++){
                for (int var : process[j][m0][t0]){
                    f << names[var] << endl;
                }
            }
        }
    }
    f.close();
    cout << "processing_machines created" << endl;
    // createCompleteGraphDot();
    // cout << "arquivo dot criado" << endl;

    // // initial flow constraint
    for (int j = 0; j < inst_.n(); j++){
        vector< int > idx;
        vector< double > coef;
        for (int var : exit_flow[j][0][0]){
            idx.push_back( var );
            coef.push_back( -1.0 );
        }
        lp_add_row( mip, idx, coef, "init_flow("+to_string(j+1)+")", 'E', -1.0 );
    }
    cout << "initial flow constraints ok" << endl;

    // // final flow constraint
    for (int j = 0; j < inst_.n(); j++){
        vector< int > idx;
        vector< double > coef;

        int esta_maquina = inst_.machine(j,inst_.m()-1)+1;
        int dur = inst_.time(j,esta_maquina-1);
        for (int t = inst_.est(j,esta_maquina-1); t <= inst_.lst(j,esta_maquina-1); t++){
            idx.push_back( xIdx_[j][inst_.m()+1][t+dur] );
            coef.push_back( 1.0 );
        }
        // int m0 = inst_.machine(j,inst_.m()-1); // maquina atual
        // int dur = inst_.time(j,m0); // duration time for machine m0 in job j
        // for (int t = inst_.est(j,m0); t <= inst_.lst(j,m0); t++){
        //     for (int var : exit_flow[j][m0][t]){
        //         idx.push_back( var );
        //         coef.push_back( 1.0 );
        //     }
        // }

        if (idx.size() != 0){
            lp_add_row( mip, idx, coef, "final_flow("+to_string(j+1)+")", 'E', 1.0 );
        }
    }
    cout << "final flow constraints ok" << endl;
    // flow constraints
    for (int j = 0; j < inst_.n(); j++){
        for ( int t=0 ; (t<=inst_.maxTime()) ; ++t ) {
            for ( int m=1 ; (m<=inst_.m()) ; ++m ) {
                vector< int > idx;
                vector< double > coef;
                for (int var : enter_flow[j][m][t]){
                    idx.push_back( var );
                    coef.push_back( 1.0 );
                }
                for (int var : exit_flow[j][m][t]){
                    idx.push_back( var );
                    coef.push_back( -1.0 );
                }

                if (idx.size() != 0){
                    lp_add_row( mip, idx, coef, "flow("+to_string(j+1)+","+to_string(m)+","+to_string(t)+")", 'E', 0.0 );
                }
            }
        }
    }
    cout << "flow constraints created" << endl;

    // // processing restriction
    // for ( int t=0 ; (t<=inst_.maxTime()) ; ++t ) {

    //     for ( int m=1 ; (m<=inst_.m()) ; ++m ) {
    //         vector< int > idx;
    //         vector< double > coef;
    //         for (int j = 0; j < inst_.n(); j++){
    //             for( int var : process[j][m][t]){
    //                 idx.push_back( var );
    //                 coef.push_back( 1.0 );
    //             }
    //         }
    //         if (idx.size() != 0){
    //             lp_add_row( mip, idx, coef, "processing("+to_string(m) + ","+to_string(t) + ")", 'L', 1.0 );        
    //         }
    //     }
        
    // }
    // cout << "processing constraints created" << endl;

    // // restrições fin
    // for (int j = 0; j < inst_.n(); j++){
    //     vector< int > idx;
    //     vector< double > coef;

    //     idx.push_back( cIdx_ );
    //     coef.push_back( 1.0 );

    //     for (int t = 1; t < inst_.maxTime(); t++){
            
    //         for (int var : enter_flow[j][inst_.m()+1+j][t]){
    //             idx.push_back( var );
    //             coef.push_back( -t );
    //         }
    //     }

    //     lp_add_row( mip, idx, coef, "fin("+to_string(j+1)+")", 'G', 0 );
    // }
    // cout << "end constraints created" << endl;

    lp_write_lp( mip, inst_.instanceName().c_str() );
    lp_write_mps( mip, inst_.instanceName().c_str() );

    if (inst_.execute()){
        lp_optimize( mip );
        lp_write_sol(mip, "jssp_flow.sol");
    }
}

Flow::~Flow()
{
    lp_free( &mip );
}

// void Flow::create_x11(){
//     x11_color.push_back("black");
//     x11_color.push_back("magenta");
//     x11_color.push_back("grey");
//     x11_color.push_back("gold");
//     x11_color.push_back("blue");
//     x11_color.push_back("green");
//     x11_color.push_back("yellow");
//     x11_color.push_back("red");
//     x11_color.push_back("cyan");
//     x11_color.push_back("crimson");
//     x11_color.push_back("chocolate");
//     x11_color.push_back("brown");
//     x11_color.push_back("orange");
// }

void Flow::createCompleteGraphDot(){
    ofstream f;
    f.open ("complete.dot");

    f << "digraph complete {" << endl;
    //f << "ratio = \"auto\" ;" << endl;
    f << "rankdir=LR;" << endl << endl;
    for (int m = 0; m <= inst_.m()+1; m++){
        if (m == 0){
            f << "\"i,1\" [shape=box];" << endl;
            continue;
        }
        string mach;
        if (mach == to_string(inst_.m()+1)) mach = "f";
        else mach = to_string(m);
        for (int t = 0; t < inst_.maxTime(); t++){
            f << "\"" << mach << "," << t+1 << "\" [shape=box];" << endl;
        }
    }

    for ( int j=0 ; (j<inst_.n()) ; ++j ) {
        for ( int m=-1 ; (m < inst_.m()) ; ++m ) {
            if (m == -1){
                f << "\"i,1\" -> \"" << inst_.machine(j,0)+1 <<",1\" [ label=\"x(" << j+1 << ",i,1," << inst_.machine(j,0)+1 << ",1)\" ]" << endl;
                continue;
            }
            int m0 = inst_.machine(j,m);
            int mf = (m == inst_.m()-1 ? inst_.m() : inst_.machine(j,m+1));
            int dur = inst_.time(j,m0); // duration time for machine m0 in job j
            for (int t = inst_.est(j,m0); t < inst_.lst(j,m0); t++){
                if (mf < inst_.m()){
                    // arc for another machine
                    f << "\"" << m0+1 << "," << t << "\" -> \"" << mf+1 << "," << t+dur << "\" [ label=\"x(" << j+1 << "," << m0+1 << "," << t << "," << mf+1 << "," << t+dur<<")\" ]" << endl;
                    // arc for same machine (waiting) 
                    //can only be made in the last moment possible
                    if (t == inst_.lst(j,m0)-1) continue;
                    // else
                    f << "\"" << m0+1 << "," << t << "\" -> \"" << m0+1 << "," << t+1 << "\" [ label=\"x(" << j+1 << "," << m0+1 << "," << t << "," << m0+1 << "," << t+1<<")\" ]" << endl;
                } else { // last machine
                    f << "\"" << m0+1 << "," << t << "\" -> \"f," << t+dur << "\" [ label=\"x(" << j+1 << "," << m0+1 << "," << t << ",f," << t+dur<<")\" ]" << endl;
                }
            }
        }
    }


    // string mach0,machf;
    // for ( int j=0 ; (j<inst_.n()) ; ++j ) {
    //     for ( int m0=0 ; (m0<=inst_.m()) ; ++m0 ) {
    //         mach0 = to_string(m0);
    //         if (mach0 == "0") mach0 = "i";
    //         for ( int t0 = 0; t0 < inst_.maxTime()-1; t0++  ) {
    //             for (int mf = 1; mf <= inst_.m()+1; mf++){
    //                 machf = to_string(mf);
    //                 if (machf == to_string(inst_.m()+1)) machf = "f";
    //                 for (int tf=t0+1; tf < inst_.maxTime(); tf++){
    //                     if (m0 == mf && tf > t0+1) continue;
    //                     f << "\"" << m0 << "," << t0+1 << "\" -> " << "\"" << machf << "," << tf << "\" [ label=\"x(" << j+1 << "," << mach0 << "," << t0+1 << "," << machf << "," << tf+1 << ")\" ];"<< endl ; // \" color=\"" << x11_color[j] <<
    //                 }
    //             }
    //         }
    //     }
    // }

    f << "{rank=same;" << " \"i,1\" }" << endl;

    for (int t = 0; t < inst_.maxTime(); t++){
        f << "{rank=same;";
        for (int m = 1; m <= inst_.m()+1; m++){
            string mach;
            if (m == inst_.m()+1) mach = "f";
            else mach = to_string(m);

            if (m > 1 )
                f << ",";
            f << " \"" << mach << "," << t+1 << "\"";
        }
        f << "}" << endl;
    }
    // for (int m = 0; m <= inst_.m()+1; m++){
    //     string mach = to_string(m);
    //     if (mach == "0") mach = "i";
    //     else if (mach == to_string(inst_.m()+1)) mach = "f";
    //     f << "{rank=same;";
    //     for (int t = 0; t < inst_.maxTime(); t++){
    //         f << " \"" << mach << "," << t+1 << "\"";
    //     }
    //     f << "}" << endl;
    // }
    f << "}" << endl;
    f.close();
}